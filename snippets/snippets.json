{
	"Arrow function component": {
		"key": "ArrowFunctionComponent",
		"prefix": "afc",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"\t",
			"}",
			"",
			"export const ${1/(.*)/${1:/capitalize}/} = ({}: ${1/(.*)/${1:/capitalize}/}Props) => {",
			"\treturn ( $0 )",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Arrow function component"
	},

	"Function component": {
		"key": "functionComponent",
		"prefix": "fc",
		"body": [
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"\t",
			"}",
			"",
			"export function ${1/(.*)/${1:/capitalize}/}({}: ${1/(.*)/${1:/capitalize}/}Props) {",
			"\treturn ( $0 )",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Function component"
	},

	"useCallback": {
		"key": "useCallback",
		"prefix": "callback",
		"body": ["useCallback(", "\t() => {", "\t\t$1", "\t},", "\t[$2],", ")", ""],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useCallback hook"
	},

	"useImperativeHandle": {
		"key": "useImperativeHandle",
		"prefix": "imperative",
		"body": [
			"useImperativeHandle(",
			"\t$1,",
			"\t() => {",
			"\t\t$2",
			"\t},",
			"\t[$3],",
			")"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useImperativeHandle hook"
	},

	"useLayoutEffect": {
		"key": "useLayoutEffect",
		"prefix": "layout",
		"body": [
			"useLayoutEffect(() => {",
			"\t$1",
			"",
			"\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [$3])"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useLayoutEffect hook"
	},

	"useContext": {
		"key": "useContext",
		"prefix": "context",
		"body": ["const $1 = useContext($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useContext hook"
	},

	"useMemo": {
		"key": "useMemo",
		"prefix": "memo",
		"body": ["useMemo(() => $1, [$2])"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useMemo hook"
	},

	"useReducer": {
		"key": "useReducer",
		"prefix": "reducer",
		"body": ["const [state, dispatch] = useReducer($1, $2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useReducer hook"
	},

	"useRef": {
		"key": "useRef",
		"prefix": "ref",
		"body": ["const $1 = useRef($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useRef hook"
	},

	"useEffect": {
		"key": "useEffect",
		"prefix": "effect",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"",
			"\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [$3])"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useEffect hook"
	},

	"useState": {
		"key": "useState",
		"prefix": "state",
		"body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useState hook"
	},

	"HOC Component": {
		"key": "hocComponent",
		"prefix": "hoc",
		"body": [
			"import { useState, ComponentType } from 'react'",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Type = {}",
			"",
			"export function with${1/(.*)/${1:/capitalize}/}<T>(",
			"\tWrappedComponent: ComponentType<T & ${1/(.*)/${1:/capitalize}/}Type>",
			") {",
			"\tconst [$2, set${1/(.*)/${1:/capitalize}/}] = useState($0)",
			"\t// set${1/(.*)/${1:/capitalize}/}('some important data.')",
			"",
			"\treturn (props: T) => {",
			"\t\treturn <WrappedComponent {...props} $2={$2} />",
			"\t};",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "High Order Component"
	},

	"Context Provider": {
		"key": "contextProvider",
		"prefix": "cp",
		"body": [
			"import { createContext, useReducer, ReactNode } from 'react'",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Context = {}",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Action = {}",
			"",
			"export const initialState: ${1/(.*)/${1:/capitalize}/}Context = {}",
			"",
			"export const $2Reducer = (state: ${1/(.*)/${1:/capitalize}/}Context, action: ${1/(.*)/${1:/capitalize}/}Action) => {}",
			"",
			"const ${1/(.*)/${1:/capitalize}/}Context = createContext<${1/(.*)/${1:/capitalize}/}Context | null>(null)",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"\tchildren: ReactNode",
			"}",
			"",
			"export const ${1/(.*)/${1:/capitalize}/}Provider = ({children}: ${1/(.*)/${1:/capitalize}/}Props) => {",
			"\tconst [state, dispatch] = useReducer($2Reducer, initialState)",
			"",
			"\treturn (",
			"\t\t<${1/(.*)/${1:/capitalize}/}Context.Provider value={{state, dispatch}}>",
			"\t\t\t{children}",
			"\t\t</${1/(.*)/${1:/capitalize}/}Context.Provider>",
			"\t)",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Context"
	},

	"Context Provider Hook": {
		"key": "contextProviderHook",
		"prefix": "cpHook",
		"body": [
			"import { createContext, useContext, useReducer, ReactNode } from 'react'",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Context = {}",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Action = {}",
			"",
			"export const initialState: ${1/(.*)/${1:/capitalize}/}Context = {}",
			"",
			"export const $2Reducer = (state: ${1/(.*)/${1:/capitalize}/}Context, action: ${1/(.*)/${1:/capitalize}/}Action) => {}",
			"",
			"const ${1/(.*)/${1:/capitalize}/}Context = createContext<${1/(.*)/${1:/capitalize}/}Context | null>(null)",
			"",
			"type ${1/(.*)/${1:/capitalize}/}Props = {",
			"\tchildren: ReactNode",
			"}",
			"",
			"export const ${1/(.*)/${1:/capitalize}/}Provider = ({children}: ${1/(.*)/${1:/capitalize}/}Props) => {",
			"\tconst [state, dispatch] = useReducer($2Reducer, initialState)",
			"",
			"\treturn (",
			"\t\t<${1/(.*)/${1:/capitalize}/}Context.Provider value={{state, dispatch}}>",
			"\t\t\t{children}",
			"\t\t</${1/(.*)/${1:/capitalize}/}Context.Provider>",
			"\t)",
			"}",
			"",
			"export const use${1/(.*)/${1:/capitalize}/} = () => {",
			"\tconst context = useContext(${1/(.*)/${1:/capitalize}/}Context)",
			"\tif (!context) {",
			"\t\tthrow new Error('use${1/(.*)/${1:/capitalize}/} must be used within a ${1/(.*)/${1:/capitalize}/}Provider')",
			"\t}",
			"",
			"\treturn context",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Context with custom hook"
	},

	"Console log": {
		"key": "consoleLog",
		"prefix": "clg",
		"body": ["console.log('$1', $1)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Console log"
	}
}
