{
	"Functional Component Arrow": {
		"key": "functionalComponentArrow",
		"prefix": "fca",
		"body": [
			"import React from 'react'",
			"",
			"type $1Props = {",
			"\t$2",
			"}",
			"",
			"const $1 = ({$2}: $1Props) => {",
			"\treturn ( $0 )",
			"}",
			"",
			"export default $1"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Stateless Function Component"
	},

	"Functional Component": {
		"key": "functionalComponent",
		"prefix": "fc",
		"body": [
			"import React from 'react'",
			"",
			"type $1Props = {",
			"\t$2",
			"}",
			"",
			"function $1({$2}: $1Props) {",
			"\treturn ( $0 )",
			"}",
			"",
			"export default $1"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Function Syntax Component"
	},

	"useCallback": {
		"key": "useCallback",
		"prefix": "useCallbackSnippet",
		"body": ["useCallback(", "\t() => {", "\t\t$1", "\t},", "\t[$2],", ")", ""],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useCallback hook"
	},

	"useImperativeHandle": {
		"key": "useImperativeHandle",
		"prefix": "useImperativeHandleSnippet",
		"body": [
			"useImperativeHandle(",
			"\t$1,",
			"\t() => {",
			"\t\t$2",
			"\t},",
			"\t[$3],",
			")"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useImperativeHandle hook"
	},

	"useLayoutEffect": {
		"key": "useLayoutEffect",
		"prefix": "useLayoutEffectSnippet",
		"body": [
			"useLayoutEffect(() => {",
			"\t$1",
			"",
			"\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [$3])"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useLayoutEffect hook"
	},

	"useContext": {
		"key": "useContext",
		"prefix": "useContextSnippet",
		"body": ["const $1 = useContext($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useContext hook"
	},

	"useMemo": {
		"key": "useMemo",
		"prefix": "useMemoSnippet",
		"body": ["useMemo(() => $1, [$2])"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useMemo hook"
	},

	"useReducer": {
		"key": "useReducer",
		"prefix": "useReducerSnippet",
		"body": ["const [state, dispatch] = useReducer($1, $2, $3)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useReducer hook"
	},

	"useRef": {
		"key": "useRef",
		"prefix": "useRefSnippet",
		"body": ["const $1 = useRef($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useRef hook"
	},

	"useEffect": {
		"key": "useEffect",
		"prefix": "useEffectSnippet",
		"body": ["useEffect(() => {", "\t$1", "}, [])"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useEffect hook"
	},

	"useState": {
		"key": "useState",
		"prefix": "useStateSnippet",
		"body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "useState hook"
	},

	"HOC Component": {
		"key": "hocComponent",
		"prefix": "hoc",
		"body": [
			"import React, { useState } from 'react'",
			"",
			"type $1Type = {",
			"\t$3",
			"}",
			"",
			"export function with$1<T>(",
			"\tWrappedComponent: React.ComponentType<T & $1Type>",
			") {",
			"\tconst [$2, set$1] = useState($0)",
			"\t// set$1('some important data.')",
			"",
			"\treturn (props: T) => {",
			"\t\treturn <WrappedComponent {...props} $2={$2} />",
			"\t};",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "High Order Component"
	},

	"Context Provider": {
		"key": "contextProvider",
		"prefix": "cp",
		"body": [
			"import React, { createContext } from 'react'",
			"",
			"export const $1Context = createContext<any>(null)",
			"",
			"type $1Props = {",
			"\tchildren: React.ReactNode",
			"}",
			"",
			"const $1Provider = (props: $1Props) => {",
			"\t// Initial Provider State",
			"\tconst state = {}",
			"",
			"\t// Reducer Function",
			"\tconst $2 = (state: any, action: any) => {",
			"\t\t",
			"\t}",
			"",
			"\treturn (",
			"\t\t<$1Context.Provider value={{state: state, $2}}>",
			"\t\t\t{props.children}",
			"\t\t</$1Context.Provider>",
			"\t)",
			"}",
			"",
			"export default $1Provider"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Context Provider"
	},

	"Context Provider Hook": {
		"key": "contextProviderHook",
		"prefix": "cpHook",
		"body": [
			"import React, { createContext, useContext } from 'react'",
			"",
			"const $1Context = createContext(null)",
			"",
			"type $1Props = {",
			"\tchildren: React.ReactNode",
			"}",
			"",
			"export const $1Provider = (props: $1Props) => {",
			"\t// Initial Provider State",
			"\tconst state = {}",
			"",
			"\t// Reducer Function",
			"\tconst $2 = (state: any, action: any) => {",
			"\t\t",
			"\t}",
			"",
			"\treturn (",
			"\t\t<$1Context.Provider value={{state: state, $2}}>",
			"\t\t\t{props.children}",
			"\t\t</$1Context.Provider>",
			"\t)",
			"}",
			"",
			"export const use$1 = () => useContext($1Context)"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Context Provider with custom hook"
	},

	"Console log": {
		"key": "consoleLog",
		"prefix": "clg",
		"body": ["console.log($1)"],
		"scope": "typescript,typescriptreact,javascript,javascriptreact",
		"description": "Console log"
	}
}
